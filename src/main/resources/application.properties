spring.application.name=globeco-trade-service
server.port=8082

# Spring Boot Actuator configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.info.env.enabled=true
management.info.env.include=systemProperties,systemEnvironment
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# PostgreSQL datasource configuration
spring.datasource.url=jdbc:postgresql://globeco-trade-service-postgresql:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=
spring.datasource.driver-class-name=org.postgresql.Driver

# Flyway configuration
spring.flyway.url=jdbc:postgresql://globeco-trade-service-postgresql:5432/postgres
spring.flyway.user=postgres
spring.flyway.password=
spring.flyway.schemas=public

# Cache Configuration
cache.security.ttl-minutes=5
cache.security.max-size=1000
cache.portfolio.ttl-minutes=5
cache.portfolio.max-size=1000

# External Service Configuration
external.security-service.base-url=http://globeco-security-service:8000
external.security-service.timeout=5000
external.portfolio-service.base-url=http://globeco-portfolio-service:8000
external.portfolio-service.timeout=5000
external.service.connect-timeout=5000
external.service.read-timeout=5000

# Logging Configuration
logging.level.root=${LOG_LEVEL:INFO}
logging.level.org.kasbench=${LOG_LEVEL:INFO}
# Suppress noisy auto-configuration debug messages
logging.level.org.springframework.boot.autoconfigure=INFO
logging.level.org.springframework.boot.autoconfigure.condition=WARN
logging.level.org.springframework.web=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Micrometer OpenTelemetry (OTLP) Metrics Export
management.otlp.metrics.export.url=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/metrics
management.otlp.metrics.export.step=1m
management.otlp.metrics.export.resource-attributes.service.name=globeco-trade-service
management.otlp.metrics.export.resource-attributes.service.version=1.0.0
management.otlp.metrics.export.resource-attributes.service.namespace=globeco
management.otlp.metrics.export.resource-attributes.service.instance.version=1.0.0
management.otlp.metrics.export.resource-attributes.service.instance.namespace=globeco

# OpenTelemetry Tracing Export (OTLP)
management.otlp.tracing.endpoint=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/traces
management.otlp.tracing.resource-attributes.service.name=globeco-trade-service
management.otlp.tracing.resource-attributes.service.version=1.0.0
management.otlp.tracing.resource-attributes.service.namespace=globeco
management.otlp.tracing.resource-attributes.service.instance.namespace=globeco
management.otlp.tracing.sampling.probability=1.0

# Logging for OTLP exporters (optional, for debugging)
logging.level.io.micrometer.registry.otlp=DEBUG
logging.level.io.opentelemetry.exporter.otlp=DEBUG

logging.level.io.micrometer=DEBUG

#For debuggin
spring.main.allow-bean-definition-overriding=true